/* automatically generated by rust-bindgen 0.69.4 */

pub const JPEG_LIB_VERSION: u32 = 80;
pub const LIBJPEG_TURBO_VERSION_NUMBER: u32 = 3000000;
pub const C_ARITH_CODING_SUPPORTED: u32 = 1;
pub const D_ARITH_CODING_SUPPORTED: u32 = 1;
pub const MEM_SRCDST_SUPPORTED: u32 = 1;
pub const WITH_SIMD: u32 = 1;
pub const BITS_IN_JSAMPLE: u32 = 8;
pub const MAX_COMPONENTS: u32 = 10;
pub const MAXJSAMPLE: u32 = 255;
pub const CENTERJSAMPLE: u32 = 128;
pub const JPEG_MAX_DIMENSION: u32 = 65500;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const DCTSIZE: u32 = 8;
pub const DCTSIZE2: u32 = 64;
pub const NUM_QUANT_TBLS: u32 = 4;
pub const NUM_HUFF_TBLS: u32 = 4;
pub const NUM_ARITH_TBLS: u32 = 16;
pub const MAX_COMPS_IN_SCAN: u32 = 4;
pub const MAX_SAMP_FACTOR: u32 = 4;
pub const C_MAX_BLOCKS_IN_MCU: u32 = 10;
pub const D_MAX_BLOCKS_IN_MCU: u32 = 10;
pub const JMSG_LENGTH_MAX: u32 = 200;
pub const JMSG_STR_PARM_MAX: u32 = 80;
pub const JPOOL_PERMANENT: u32 = 0;
pub const JPOOL_IMAGE: u32 = 1;
pub const JPOOL_NUMPOOLS: u32 = 2;
pub const JPEG_SUSPENDED: u32 = 0;
pub const JPEG_HEADER_OK: u32 = 1;
pub const JPEG_HEADER_TABLES_ONLY: u32 = 2;
pub const JPEG_REACHED_SOS: u32 = 1;
pub const JPEG_REACHED_EOI: u32 = 2;
pub const JPEG_ROW_COMPLETED: u32 = 3;
pub const JPEG_SCAN_COMPLETED: u32 = 4;
pub const JPEG_RST0: u32 = 208;
pub const JPEG_EOI: u32 = 217;
pub const JPEG_APP0: u32 = 224;
pub const JPEG_COM: u32 = 254;
pub type JSAMPLE = ::std::os::raw::c_char;
pub type JCOEF = ::std::os::raw::c_short;
pub type JOCTET = ::std::os::raw::c_char;
pub type UINT8 = ::std::os::raw::c_short;
pub type UINT16 = ::std::os::raw::c_uint;
pub type INT16 = ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_long;
pub type JDIMENSION = ::std::os::raw::c_uint;
pub type boolean = ::std::os::raw::c_int;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type JSAMPROW = *mut JSAMPLE;
pub type JSAMPARRAY = *mut JSAMPROW;
pub type JSAMPIMAGE = *mut JSAMPARRAY;
pub type JBLOCK = [JCOEF; 64usize];
pub type JBLOCKROW = *mut JBLOCK;
pub type JBLOCKARRAY = *mut JBLOCKROW;
pub type JBLOCKIMAGE = *mut JBLOCKARRAY;
pub type JCOEFPTR = *mut JCOEF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JQUANT_TBL {
    pub quantval: [UINT16; 64usize],
    pub sent_table: boolean,
}
#[test]
fn bindgen_test_layout_JQUANT_TBL() {
    const UNINIT: ::std::mem::MaybeUninit<JQUANT_TBL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JQUANT_TBL>(),
        260usize,
        concat!("Size of: ", stringify!(JQUANT_TBL))
    );
    assert_eq!(
        ::std::mem::align_of::<JQUANT_TBL>(),
        4usize,
        concat!("Alignment of ", stringify!(JQUANT_TBL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JQUANT_TBL),
            "::",
            stringify!(quantval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sent_table) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(JQUANT_TBL),
            "::",
            stringify!(sent_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JHUFF_TBL {
    pub bits: [UINT8; 17usize],
    pub huffval: [UINT8; 256usize],
    pub sent_table: boolean,
}
#[test]
fn bindgen_test_layout_JHUFF_TBL() {
    const UNINIT: ::std::mem::MaybeUninit<JHUFF_TBL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<JHUFF_TBL>(),
        552usize,
        concat!("Size of: ", stringify!(JHUFF_TBL))
    );
    assert_eq!(
        ::std::mem::align_of::<JHUFF_TBL>(),
        4usize,
        concat!("Alignment of ", stringify!(JHUFF_TBL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).huffval) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(huffval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sent_table) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(sent_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_component_info {
    pub component_id: ::std::os::raw::c_int,
    pub component_index: ::std::os::raw::c_int,
    pub h_samp_factor: ::std::os::raw::c_int,
    pub v_samp_factor: ::std::os::raw::c_int,
    pub quant_tbl_no: ::std::os::raw::c_int,
    pub dc_tbl_no: ::std::os::raw::c_int,
    pub ac_tbl_no: ::std::os::raw::c_int,
    pub width_in_blocks: JDIMENSION,
    pub height_in_blocks: JDIMENSION,
    pub DCT_scaled_size: ::std::os::raw::c_int,
    pub downsampled_width: JDIMENSION,
    pub downsampled_height: JDIMENSION,
    pub component_needed: boolean,
    pub MCU_width: ::std::os::raw::c_int,
    pub MCU_height: ::std::os::raw::c_int,
    pub MCU_blocks: ::std::os::raw::c_int,
    pub MCU_sample_width: ::std::os::raw::c_int,
    pub last_col_width: ::std::os::raw::c_int,
    pub last_row_height: ::std::os::raw::c_int,
    pub quant_table: *mut JQUANT_TBL,
    pub dct_table: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_jpeg_component_info() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_component_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_component_info>(),
        96usize,
        concat!("Size of: ", stringify!(jpeg_component_info))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_component_info>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_component_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).component_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).component_index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_samp_factor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(h_samp_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_samp_factor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(v_samp_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quant_tbl_no) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(quant_tbl_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dc_tbl_no) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(dc_tbl_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_tbl_no) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(ac_tbl_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width_in_blocks) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(width_in_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height_in_blocks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(height_in_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCT_scaled_size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(DCT_scaled_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).downsampled_width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(downsampled_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).downsampled_height) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(downsampled_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).component_needed) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_needed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_width) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_blocks) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_sample_width) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_sample_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_col_width) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(last_col_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_row_height) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(last_row_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quant_table) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(quant_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dct_table) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(dct_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_scan_info {
    pub comps_in_scan: ::std::os::raw::c_int,
    pub component_index: [::std::os::raw::c_int; 4usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_scan_info() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_scan_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_scan_info>(),
        36usize,
        concat!("Size of: ", stringify!(jpeg_scan_info))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_scan_info>(),
        4usize,
        concat!("Alignment of ", stringify!(jpeg_scan_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comps_in_scan) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).component_index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(component_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ss) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Se) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ah) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Al) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Al)
        )
    );
}
pub type jpeg_saved_marker_ptr = *mut jpeg_marker_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_struct {
    pub next: jpeg_saved_marker_ptr,
    pub marker: UINT8,
    pub original_length: ::std::os::raw::c_uint,
    pub data_length: ::std::os::raw::c_uint,
    pub data: *mut JOCTET,
}
#[test]
fn bindgen_test_layout_jpeg_marker_struct() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_marker_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_marker_struct>(),
        32usize,
        concat!("Size of: ", stringify!(jpeg_marker_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_marker_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_marker_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).original_length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(original_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(data)
        )
    );
}
pub const J_COLOR_SPACE_JCS_UNKNOWN: J_COLOR_SPACE = 0;
pub const J_COLOR_SPACE_JCS_GRAYSCALE: J_COLOR_SPACE = 1;
pub const J_COLOR_SPACE_JCS_RGB: J_COLOR_SPACE = 2;
pub const J_COLOR_SPACE_JCS_YCbCr: J_COLOR_SPACE = 3;
pub const J_COLOR_SPACE_JCS_CMYK: J_COLOR_SPACE = 4;
pub const J_COLOR_SPACE_JCS_YCCK: J_COLOR_SPACE = 5;
pub type J_COLOR_SPACE = ::std::os::raw::c_uint;
pub const J_DCT_METHOD_JDCT_ISLOW: J_DCT_METHOD = 0;
pub const J_DCT_METHOD_JDCT_IFAST: J_DCT_METHOD = 1;
pub const J_DCT_METHOD_JDCT_FLOAT: J_DCT_METHOD = 2;
pub type J_DCT_METHOD = ::std::os::raw::c_uint;
pub const J_DITHER_MODE_JDITHER_NONE: J_DITHER_MODE = 0;
pub const J_DITHER_MODE_JDITHER_ORDERED: J_DITHER_MODE = 1;
pub const J_DITHER_MODE_JDITHER_FS: J_DITHER_MODE = 2;
pub type J_DITHER_MODE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_common_struct {
    pub err: *mut jpeg_error_mgr,
    pub mem: *mut jpeg_memory_mgr,
    pub progress: *mut jpeg_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_common_struct() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_common_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_common_struct>(),
        40usize,
        concat!("Size of: ", stringify!(jpeg_common_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_common_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_common_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_decompressor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_state) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(global_state)
        )
    );
}
pub type j_common_ptr = *mut jpeg_common_struct;
pub type j_compress_ptr = *mut jpeg_compress_struct;
pub type j_decompress_ptr = *mut jpeg_decompress_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_compress_struct {
    pub err: *mut jpeg_error_mgr,
    pub mem: *mut jpeg_memory_mgr,
    pub progress: *mut jpeg_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
    pub dest: *mut jpeg_destination_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub input_components: ::std::os::raw::c_int,
    pub in_color_space: J_COLOR_SPACE,
    pub input_gamma: f64,
    pub data_precision: ::std::os::raw::c_int,
    pub num_components: ::std::os::raw::c_int,
    pub jpeg_color_space: J_COLOR_SPACE,
    pub comp_info: *mut jpeg_component_info,
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub num_scans: ::std::os::raw::c_int,
    pub scan_info: *const jpeg_scan_info,
    pub raw_data_in: boolean,
    pub arith_code: boolean,
    pub optimize_coding: boolean,
    pub CCIR601_sampling: boolean,
    pub smoothing_factor: ::std::os::raw::c_int,
    pub dct_method: J_DCT_METHOD,
    pub restart_interval: ::std::os::raw::c_uint,
    pub restart_in_rows: ::std::os::raw::c_int,
    pub write_JFIF_header: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub write_Adobe_marker: boolean,
    pub next_scanline: JDIMENSION,
    pub progressive_mode: boolean,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpeg_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub blocks_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub master: *mut jpeg_comp_master,
    pub main: *mut jpeg_c_main_controller,
    pub prep: *mut jpeg_c_prep_controller,
    pub coef: *mut jpeg_c_coef_controller,
    pub marker: *mut jpeg_marker_writer,
    pub cconvert: *mut jpeg_color_converter,
    pub downsample: *mut jpeg_downsampler,
    pub fdct: *mut jpeg_forward_dct,
    pub entropy: *mut jpeg_entropy_encoder,
    pub script_space: *mut jpeg_scan_info,
    pub script_space_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_compress_struct() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_compress_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_compress_struct>(),
        576usize,
        concat!("Size of: ", stringify!(jpeg_compress_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_compress_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_compress_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_decompressor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_state) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(global_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_height) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_components) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(input_components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_color_space) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(in_color_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_gamma) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(input_gamma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_precision) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(data_precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_components) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(num_components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jpeg_color_space) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(jpeg_color_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_info) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(comp_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quant_tbl_ptrs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(quant_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dc_huff_tbl_ptrs) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(dc_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_huff_tbl_ptrs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(ac_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_dc_L) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_dc_L)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_dc_U) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_dc_U)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_ac_K) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_ac_K)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_scans) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(num_scans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_info) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(scan_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_data_in) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(raw_data_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_code) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optimize_coding) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(optimize_coding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCIR601_sampling) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(CCIR601_sampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smoothing_factor) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(smoothing_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dct_method) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(dct_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).restart_interval) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(restart_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).restart_in_rows) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(restart_in_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_JFIF_header) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(write_JFIF_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JFIF_major_version) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(JFIF_major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JFIF_minor_version) as usize - ptr as usize },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(JFIF_minor_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).density_unit) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(density_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X_density) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(X_density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y_density) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Y_density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_Adobe_marker) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(write_Adobe_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_scanline) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(next_scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressive_mode) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(progressive_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_h_samp_factor) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(max_h_samp_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_v_samp_factor) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(max_v_samp_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_iMCU_rows) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(total_iMCU_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comps_in_scan) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_comp_info) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(cur_comp_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCUs_per_row) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(MCUs_per_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_rows_in_scan) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(MCU_rows_in_scan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks_in_MCU) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(blocks_in_MCU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_membership) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(MCU_membership)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ss) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Se) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ah) as usize - ptr as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Al) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Al)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prep) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(prep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coef) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(coef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cconvert) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(cconvert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).downsample) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(downsample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdct) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(fdct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entropy) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(entropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).script_space) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(script_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).script_space_size) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(script_space_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_decompress_struct {
    pub err: *mut jpeg_error_mgr,
    pub mem: *mut jpeg_memory_mgr,
    pub progress: *mut jpeg_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
    pub src: *mut jpeg_source_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub num_components: ::std::os::raw::c_int,
    pub jpeg_color_space: J_COLOR_SPACE,
    pub out_color_space: J_COLOR_SPACE,
    pub scale_num: ::std::os::raw::c_uint,
    pub scale_denom: ::std::os::raw::c_uint,
    pub output_gamma: f64,
    pub buffered_image: boolean,
    pub raw_data_out: boolean,
    pub dct_method: J_DCT_METHOD,
    pub do_fancy_upsampling: boolean,
    pub do_block_smoothing: boolean,
    pub quantize_colors: boolean,
    pub dither_mode: J_DITHER_MODE,
    pub two_pass_quantize: boolean,
    pub desired_number_of_colors: ::std::os::raw::c_int,
    pub enable_1pass_quant: boolean,
    pub enable_external_quant: boolean,
    pub enable_2pass_quant: boolean,
    pub output_width: JDIMENSION,
    pub output_height: JDIMENSION,
    pub out_color_components: ::std::os::raw::c_int,
    pub output_components: ::std::os::raw::c_int,
    pub rec_outbuf_height: ::std::os::raw::c_int,
    pub actual_number_of_colors: ::std::os::raw::c_int,
    pub colormap: JSAMPARRAY,
    pub output_scanline: JDIMENSION,
    pub input_scan_number: ::std::os::raw::c_int,
    pub input_iMCU_row: JDIMENSION,
    pub output_scan_number: ::std::os::raw::c_int,
    pub output_iMCU_row: JDIMENSION,
    pub coef_bits: *mut [::std::os::raw::c_int; 64usize],
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub data_precision: ::std::os::raw::c_int,
    pub comp_info: *mut jpeg_component_info,
    pub progressive_mode: boolean,
    pub arith_code: boolean,
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub restart_interval: ::std::os::raw::c_uint,
    pub saw_JFIF_marker: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub saw_Adobe_marker: boolean,
    pub Adobe_transform: UINT8,
    pub CCIR601_sampling: boolean,
    pub marker_list: jpeg_saved_marker_ptr,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub min_DCT_scaled_size: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub sample_range_limit: *mut JSAMPLE,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpeg_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub blocks_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub unread_marker: ::std::os::raw::c_int,
    pub master: *mut jpeg_decomp_master,
    pub main: *mut jpeg_d_main_controller,
    pub coef: *mut jpeg_d_coef_controller,
    pub post: *mut jpeg_d_post_controller,
    pub inputctl: *mut jpeg_input_controller,
    pub marker: *mut jpeg_marker_reader,
    pub entropy: *mut jpeg_entropy_decoder,
    pub idct: *mut jpeg_inverse_dct,
    pub upsample: *mut jpeg_upsampler,
    pub cconvert: *mut jpeg_color_deconverter,
    pub cquantize: *mut jpeg_color_quantizer,
}
#[test]
fn bindgen_test_layout_jpeg_decompress_struct() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_decompress_struct> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_decompress_struct>(),
        688usize,
        concat!("Size of: ", stringify!(jpeg_decompress_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_decompress_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_decompress_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_decompressor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_state) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(global_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_height) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_components) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(num_components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jpeg_color_space) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(jpeg_color_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_color_space) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(out_color_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_num) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(scale_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_denom) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(scale_denom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_gamma) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_gamma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffered_image) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(buffered_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_data_out) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(raw_data_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dct_method) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(dct_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_fancy_upsampling) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(do_fancy_upsampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_block_smoothing) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(do_block_smoothing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantize_colors) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(quantize_colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dither_mode) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(dither_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).two_pass_quantize) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(two_pass_quantize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desired_number_of_colors) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(desired_number_of_colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_1pass_quant) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(enable_1pass_quant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_external_quant) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(enable_external_quant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_2pass_quant) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(enable_2pass_quant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_width) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_height) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_color_components) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(out_color_components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_components) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rec_outbuf_height) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(rec_outbuf_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actual_number_of_colors) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(actual_number_of_colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colormap) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_scanline) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_scan_number) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(input_scan_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_iMCU_row) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(input_iMCU_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_scan_number) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_scan_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_iMCU_row) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_iMCU_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coef_bits) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(coef_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quant_tbl_ptrs) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(quant_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dc_huff_tbl_ptrs) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(dc_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac_huff_tbl_ptrs) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(ac_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_precision) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(data_precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_info) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(comp_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressive_mode) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(progressive_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_code) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_dc_L) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_dc_L)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_dc_U) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_dc_U)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arith_ac_K) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_ac_K)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).restart_interval) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(restart_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saw_JFIF_marker) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(saw_JFIF_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JFIF_major_version) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(JFIF_major_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JFIF_minor_version) as usize - ptr as usize },
        426usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(JFIF_minor_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).density_unit) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(density_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X_density) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(X_density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y_density) as usize - ptr as usize },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Y_density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saw_Adobe_marker) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(saw_Adobe_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Adobe_transform) as usize - ptr as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Adobe_transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCIR601_sampling) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(CCIR601_sampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_list) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(marker_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_h_samp_factor) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(max_h_samp_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_v_samp_factor) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(max_v_samp_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_DCT_scaled_size) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(min_DCT_scaled_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_iMCU_rows) as usize - ptr as usize },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(total_iMCU_rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample_range_limit) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(sample_range_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comps_in_scan) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_comp_info) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(cur_comp_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCUs_per_row) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(MCUs_per_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_rows_in_scan) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(MCU_rows_in_scan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks_in_MCU) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(blocks_in_MCU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCU_membership) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(MCU_membership)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ss) as usize - ptr as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Se) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ah) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Al) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Al)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unread_marker) as usize - ptr as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(unread_marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coef) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(coef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(post)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputctl) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(inputctl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entropy) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(entropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idct) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(idct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upsample) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(upsample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cconvert) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(cconvert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cquantize) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(cquantize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jpeg_error_mgr {
    pub error_exit: ::std::option::Option<unsafe extern "C" fn()>,
    pub emit_message: ::std::option::Option<unsafe extern "C" fn()>,
    pub output_message: ::std::option::Option<unsafe extern "C" fn()>,
    pub format_message: ::std::option::Option<unsafe extern "C" fn()>,
    pub reset_error_mgr: ::std::option::Option<unsafe extern "C" fn()>,
    pub msg_code: ::std::os::raw::c_int,
    pub msg_parm: jpeg_error_mgr__bindgen_ty_1,
    pub trace_level: ::std::os::raw::c_int,
    pub num_warnings: ::std::os::raw::c_long,
    pub jpeg_message_table: *const *const ::std::os::raw::c_char,
    pub last_jpeg_message: ::std::os::raw::c_int,
    pub addon_message_table: *const *const ::std::os::raw::c_char,
    pub first_addon_message: ::std::os::raw::c_int,
    pub last_addon_message: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jpeg_error_mgr__bindgen_ty_1 {
    pub i: [::std::os::raw::c_int; 8usize],
    pub s: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_jpeg_error_mgr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_error_mgr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_error_mgr__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(jpeg_error_mgr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_error_mgr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(jpeg_error_mgr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
}
#[test]
fn bindgen_test_layout_jpeg_error_mgr() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_error_mgr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_error_mgr>(),
        168usize,
        concat!("Size of: ", stringify!(jpeg_error_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_error_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_error_mgr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_exit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(error_exit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emit_message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(emit_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_message) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(output_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format_message) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(format_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reset_error_mgr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(reset_error_mgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_code) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(msg_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_parm) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(msg_parm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trace_level) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(trace_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_warnings) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(num_warnings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jpeg_message_table) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(jpeg_message_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_jpeg_message) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(last_jpeg_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addon_message_table) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(addon_message_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_addon_message) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(first_addon_message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_addon_message) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(last_addon_message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_progress_mgr {
    pub progress_monitor: ::std::option::Option<unsafe extern "C" fn()>,
    pub pass_counter: ::std::os::raw::c_long,
    pub pass_limit: ::std::os::raw::c_long,
    pub completed_passes: ::std::os::raw::c_int,
    pub total_passes: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_progress_mgr() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_progress_mgr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_progress_mgr>(),
        32usize,
        concat!("Size of: ", stringify!(jpeg_progress_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_progress_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_progress_mgr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress_monitor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(progress_monitor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_counter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(pass_counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass_limit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(pass_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completed_passes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(completed_passes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_passes) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(total_passes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_destination_mgr {
    pub next_output_byte: *mut JOCTET,
    pub free_in_buffer: usize,
    pub init_destination: ::std::option::Option<unsafe extern "C" fn()>,
    pub empty_output_buffer: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub term_destination: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_jpeg_destination_mgr() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_destination_mgr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_destination_mgr>(),
        40usize,
        concat!("Size of: ", stringify!(jpeg_destination_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_destination_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_destination_mgr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_output_byte) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(next_output_byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_in_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(free_in_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_destination) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(init_destination)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).empty_output_buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(empty_output_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term_destination) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(term_destination)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_source_mgr {
    pub next_input_byte: *const JOCTET,
    pub bytes_in_buffer: usize,
    pub init_source: ::std::option::Option<unsafe extern "C" fn()>,
    pub fill_input_buffer: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub skip_input_data: ::std::option::Option<unsafe extern "C" fn()>,
    pub resync_to_restart: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub term_source: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_jpeg_source_mgr() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_source_mgr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_source_mgr>(),
        56usize,
        concat!("Size of: ", stringify!(jpeg_source_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_source_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_source_mgr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_input_byte) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(next_input_byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_in_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(bytes_in_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_source) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(init_source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fill_input_buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(fill_input_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skip_input_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(skip_input_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resync_to_restart) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(resync_to_restart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term_source) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(term_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_sarray_control {
    _unused: [u8; 0],
}
pub type jvirt_sarray_ptr = *mut jvirt_sarray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_barray_control {
    _unused: [u8; 0],
}
pub type jvirt_barray_ptr = *mut jvirt_barray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_memory_mgr {
    pub alloc_small: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub alloc_large: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub alloc_sarray: ::std::option::Option<unsafe extern "C" fn() -> JSAMPARRAY>,
    pub alloc_barray: ::std::option::Option<unsafe extern "C" fn() -> JBLOCKARRAY>,
    pub request_virt_sarray: ::std::option::Option<unsafe extern "C" fn() -> jvirt_sarray_ptr>,
    pub request_virt_barray: ::std::option::Option<unsafe extern "C" fn() -> jvirt_barray_ptr>,
    pub realize_virt_arrays: ::std::option::Option<unsafe extern "C" fn()>,
    pub access_virt_sarray: ::std::option::Option<unsafe extern "C" fn() -> JSAMPARRAY>,
    pub access_virt_barray: ::std::option::Option<unsafe extern "C" fn() -> JBLOCKARRAY>,
    pub free_pool: ::std::option::Option<unsafe extern "C" fn()>,
    pub self_destruct: ::std::option::Option<unsafe extern "C" fn()>,
    pub max_memory_to_use: ::std::os::raw::c_long,
    pub max_alloc_chunk: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_jpeg_memory_mgr() {
    const UNINIT: ::std::mem::MaybeUninit<jpeg_memory_mgr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<jpeg_memory_mgr>(),
        104usize,
        concat!("Size of: ", stringify!(jpeg_memory_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_memory_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_memory_mgr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_small) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_small)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_large) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_large)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_sarray) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_sarray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_barray) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_barray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_virt_sarray) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(request_virt_sarray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_virt_barray) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(request_virt_barray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realize_virt_arrays) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(realize_virt_arrays)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_virt_sarray) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(access_virt_sarray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_virt_barray) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(access_virt_barray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_pool) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(free_pool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).self_destruct) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(self_destruct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_memory_to_use) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(max_memory_to_use)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_alloc_chunk) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(max_alloc_chunk)
        )
    );
}
pub type jpeg_marker_parser_method = ::std::option::Option<unsafe extern "C" fn() -> boolean>;
extern "C" {
    pub fn jpeg_std_error() -> *mut jpeg_error_mgr;
}
extern "C" {
    pub fn jpeg_CreateCompress();
}
extern "C" {
    pub fn jpeg_CreateDecompress();
}
extern "C" {
    pub fn jpeg_destroy_compress();
}
extern "C" {
    pub fn jpeg_destroy_decompress();
}
extern "C" {
    pub fn jpeg_stdio_dest();
}
extern "C" {
    pub fn jpeg_stdio_src();
}
extern "C" {
    pub fn jpeg_set_defaults();
}
extern "C" {
    pub fn jpeg_set_colorspace();
}
extern "C" {
    pub fn jpeg_default_colorspace();
}
extern "C" {
    pub fn jpeg_set_quality();
}
extern "C" {
    pub fn jpeg_set_linear_quality();
}
extern "C" {
    pub fn jpeg_add_quant_table();
}
extern "C" {
    pub fn jpeg_quality_scaling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg_simple_progression();
}
extern "C" {
    pub fn jpeg_suppress_tables();
}
extern "C" {
    pub fn jpeg_alloc_quant_table() -> *mut JQUANT_TBL;
}
extern "C" {
    pub fn jpeg_alloc_huff_table() -> *mut JHUFF_TBL;
}
extern "C" {
    pub fn jpeg_start_compress();
}
extern "C" {
    pub fn jpeg_write_scanlines() -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_finish_compress();
}
extern "C" {
    pub fn jpeg_write_raw_data() -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_write_marker();
}
extern "C" {
    pub fn jpeg_write_m_header();
}
extern "C" {
    pub fn jpeg_write_m_byte();
}
extern "C" {
    pub fn jpeg_write_tables();
}
extern "C" {
    pub fn jpeg_read_header() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg_start_decompress() -> boolean;
}
extern "C" {
    pub fn jpeg_read_scanlines() -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_finish_decompress() -> boolean;
}
extern "C" {
    pub fn jpeg_read_raw_data() -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_has_multiple_scans() -> boolean;
}
extern "C" {
    pub fn jpeg_start_output() -> boolean;
}
extern "C" {
    pub fn jpeg_finish_output() -> boolean;
}
extern "C" {
    pub fn jpeg_input_complete() -> boolean;
}
extern "C" {
    pub fn jpeg_new_colormap();
}
extern "C" {
    pub fn jpeg_consume_input() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg_calc_output_dimensions();
}
extern "C" {
    pub fn jpeg_save_markers();
}
extern "C" {
    pub fn jpeg_set_marker_processor();
}
extern "C" {
    pub fn jpeg_read_coefficients() -> *mut jvirt_barray_ptr;
}
extern "C" {
    pub fn jpeg_write_coefficients();
}
extern "C" {
    pub fn jpeg_copy_critical_parameters();
}
extern "C" {
    pub fn jpeg_abort_compress();
}
extern "C" {
    pub fn jpeg_abort_decompress();
}
extern "C" {
    pub fn jpeg_abort();
}
extern "C" {
    pub fn jpeg_destroy();
}
extern "C" {
    pub fn jpeg_resync_to_restart() -> boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_comp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_prep_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_coef_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_writer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_converter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_downsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_forward_dct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_entropy_encoder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_decomp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_coef_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_post_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_input_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_reader {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_entropy_decoder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_inverse_dct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_upsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_deconverter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_quantizer {
    pub _address: u8,
}
